{"4":{"result":{"mime":"","failed":false,"data":"(SparseArrays.SparseMatrixCSC{ComplexF64, Int64}, 0.08203125)"},"stdout":"","logs":[],"code":"using SparseArrays\nheisenberg_matrix_sparse(n) = sum([pauli_x, pauli_y, pauli_z]) do O\n  sum(i->kron(fill(sparse(id), i-1)..., sparse(O), sparse(O), fill(sparse(id), n-i-1)...), 1:n-1)\nend\n\nh5_sparse = heisenberg_matrix_sparse(5)\n\ntypeof(h5_sparse), nnz(h5_sparse)/length(h5_sparse)"},"1":{"result":{"mime":"","failed":false,"data":"0.9999999999999998 + 0.0im"},"stdout":"","logs":[],"code":"id = ComplexF64[1 0; 0 1]\npauli_x = ComplexF64[0 1; 1 0]\npauli_y = ComplexF64[0 -im; im 0]\npauli_z = ComplexF64[1 0; 0 -1]\n\nexpected = y_plus' * pauli_y * y_plus"},"0":{"result":{"mime":"","failed":false,"data":"ComplexF64[0.7071067811865475 + 0.0im, 0.0 + 0.7071067811865475im]"},"stdout":"","logs":[],"code":"y_plus = ComplexF64[1/sqrt(2), im/sqrt(2)]"},"2":{"result":{"mime":"","failed":false,"data":"(32, 32)"},"stdout":"","logs":[],"code":"using LinearAlgebra\nheisenberg_matrix(n) = sum([pauli_x, pauli_y, pauli_z]) do O\n  sum(i->kron(fill(id, i-1)..., O, O, fill(id, n-i-1)...), 1:n-1)\nend\n\nh5 = heisenberg_matrix(5)\n\nsize(h5)"},"3":{"result":{"mime":"","failed":false,"data":"0.08203125"},"stdout":"","logs":[],"code":"sparsity = count(!iszero, h5)/length(h5)"}}